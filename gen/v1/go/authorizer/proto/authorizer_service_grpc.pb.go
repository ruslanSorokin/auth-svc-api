// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: authorizer_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorizerServiceClient is the client API for AuthorizerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizerServiceClient interface {
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	RefreshTokenPair(ctx context.Context, in *RefreshTokenPairRequest, opts ...grpc.CallOption) (*RefreshTokenPairResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	LogoutAll(ctx context.Context, in *LogoutAllRequest, opts ...grpc.CallOption) (*LogoutAllResponse, error)
}

type authorizerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizerServiceClient(cc grpc.ClientConnInterface) AuthorizerServiceClient {
	return &authorizerServiceClient{cc}
}

func (c *authorizerServiceClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, "/v1.authorizer.proto.AuthorizerService/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizerServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/v1.authorizer.proto.AuthorizerService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizerServiceClient) RefreshTokenPair(ctx context.Context, in *RefreshTokenPairRequest, opts ...grpc.CallOption) (*RefreshTokenPairResponse, error) {
	out := new(RefreshTokenPairResponse)
	err := c.cc.Invoke(ctx, "/v1.authorizer.proto.AuthorizerService/RefreshTokenPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizerServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, "/v1.authorizer.proto.AuthorizerService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizerServiceClient) LogoutAll(ctx context.Context, in *LogoutAllRequest, opts ...grpc.CallOption) (*LogoutAllResponse, error) {
	out := new(LogoutAllResponse)
	err := c.cc.Invoke(ctx, "/v1.authorizer.proto.AuthorizerService/LogoutAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizerServiceServer is the server API for AuthorizerService service.
// All implementations must embed UnimplementedAuthorizerServiceServer
// for forward compatibility
type AuthorizerServiceServer interface {
	SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	RefreshTokenPair(context.Context, *RefreshTokenPairRequest) (*RefreshTokenPairResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	LogoutAll(context.Context, *LogoutAllRequest) (*LogoutAllResponse, error)
	mustEmbedUnimplementedAuthorizerServiceServer()
}

// UnimplementedAuthorizerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorizerServiceServer struct {
}

func (UnimplementedAuthorizerServiceServer) SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedAuthorizerServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthorizerServiceServer) RefreshTokenPair(context.Context, *RefreshTokenPairRequest) (*RefreshTokenPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshTokenPair not implemented")
}
func (UnimplementedAuthorizerServiceServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthorizerServiceServer) LogoutAll(context.Context, *LogoutAllRequest) (*LogoutAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutAll not implemented")
}
func (UnimplementedAuthorizerServiceServer) mustEmbedUnimplementedAuthorizerServiceServer() {}

// UnsafeAuthorizerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizerServiceServer will
// result in compilation errors.
type UnsafeAuthorizerServiceServer interface {
	mustEmbedUnimplementedAuthorizerServiceServer()
}

func RegisterAuthorizerServiceServer(s grpc.ServiceRegistrar, srv AuthorizerServiceServer) {
	s.RegisterService(&AuthorizerService_ServiceDesc, srv)
}

func _AuthorizerService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizerServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.authorizer.proto.AuthorizerService/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizerServiceServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizerService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizerServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.authorizer.proto.AuthorizerService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizerServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizerService_RefreshTokenPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizerServiceServer).RefreshTokenPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.authorizer.proto.AuthorizerService/RefreshTokenPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizerServiceServer).RefreshTokenPair(ctx, req.(*RefreshTokenPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizerService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizerServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.authorizer.proto.AuthorizerService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizerServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizerService_LogoutAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizerServiceServer).LogoutAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.authorizer.proto.AuthorizerService/LogoutAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizerServiceServer).LogoutAll(ctx, req.(*LogoutAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorizerService_ServiceDesc is the grpc.ServiceDesc for AuthorizerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorizerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.authorizer.proto.AuthorizerService",
	HandlerType: (*AuthorizerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _AuthorizerService_SignUp_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AuthorizerService_Login_Handler,
		},
		{
			MethodName: "RefreshTokenPair",
			Handler:    _AuthorizerService_RefreshTokenPair_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AuthorizerService_Logout_Handler,
		},
		{
			MethodName: "LogoutAll",
			Handler:    _AuthorizerService_LogoutAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authorizer_service.proto",
}
