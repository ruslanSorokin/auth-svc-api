// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: orchestrator_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrchestratorServiceClient is the client API for OrchestratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrchestratorServiceClient interface {
	GetSecrets(ctx context.Context, in *GetSecretsRequest, opts ...grpc.CallOption) (*GetSecretsResponse, error)
	ForceLogoutAll(ctx context.Context, in *ForceLogoutAllRequest, opts ...grpc.CallOption) (*ForceLogoutAllResponse, error)
	ForceLogout(ctx context.Context, in *ForceLogoutRequest, opts ...grpc.CallOption) (*ForceLogoutResponse, error)
}

type orchestratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchestratorServiceClient(cc grpc.ClientConnInterface) OrchestratorServiceClient {
	return &orchestratorServiceClient{cc}
}

func (c *orchestratorServiceClient) GetSecrets(ctx context.Context, in *GetSecretsRequest, opts ...grpc.CallOption) (*GetSecretsResponse, error) {
	out := new(GetSecretsResponse)
	err := c.cc.Invoke(ctx, "/v1.orchestrator.proto.OrchestratorService/GetSecrets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) ForceLogoutAll(ctx context.Context, in *ForceLogoutAllRequest, opts ...grpc.CallOption) (*ForceLogoutAllResponse, error) {
	out := new(ForceLogoutAllResponse)
	err := c.cc.Invoke(ctx, "/v1.orchestrator.proto.OrchestratorService/ForceLogoutAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) ForceLogout(ctx context.Context, in *ForceLogoutRequest, opts ...grpc.CallOption) (*ForceLogoutResponse, error) {
	out := new(ForceLogoutResponse)
	err := c.cc.Invoke(ctx, "/v1.orchestrator.proto.OrchestratorService/ForceLogout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrchestratorServiceServer is the server API for OrchestratorService service.
// All implementations must embed UnimplementedOrchestratorServiceServer
// for forward compatibility
type OrchestratorServiceServer interface {
	GetSecrets(context.Context, *GetSecretsRequest) (*GetSecretsResponse, error)
	ForceLogoutAll(context.Context, *ForceLogoutAllRequest) (*ForceLogoutAllResponse, error)
	ForceLogout(context.Context, *ForceLogoutRequest) (*ForceLogoutResponse, error)
	mustEmbedUnimplementedOrchestratorServiceServer()
}

// UnimplementedOrchestratorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrchestratorServiceServer struct {
}

func (UnimplementedOrchestratorServiceServer) GetSecrets(context.Context, *GetSecretsRequest) (*GetSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecrets not implemented")
}
func (UnimplementedOrchestratorServiceServer) ForceLogoutAll(context.Context, *ForceLogoutAllRequest) (*ForceLogoutAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceLogoutAll not implemented")
}
func (UnimplementedOrchestratorServiceServer) ForceLogout(context.Context, *ForceLogoutRequest) (*ForceLogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceLogout not implemented")
}
func (UnimplementedOrchestratorServiceServer) mustEmbedUnimplementedOrchestratorServiceServer() {}

// UnsafeOrchestratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrchestratorServiceServer will
// result in compilation errors.
type UnsafeOrchestratorServiceServer interface {
	mustEmbedUnimplementedOrchestratorServiceServer()
}

func RegisterOrchestratorServiceServer(s grpc.ServiceRegistrar, srv OrchestratorServiceServer) {
	s.RegisterService(&OrchestratorService_ServiceDesc, srv)
}

func _OrchestratorService_GetSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).GetSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.orchestrator.proto.OrchestratorService/GetSecrets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).GetSecrets(ctx, req.(*GetSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_ForceLogoutAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceLogoutAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).ForceLogoutAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.orchestrator.proto.OrchestratorService/ForceLogoutAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).ForceLogoutAll(ctx, req.(*ForceLogoutAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_ForceLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).ForceLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.orchestrator.proto.OrchestratorService/ForceLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).ForceLogout(ctx, req.(*ForceLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrchestratorService_ServiceDesc is the grpc.ServiceDesc for OrchestratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrchestratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.orchestrator.proto.OrchestratorService",
	HandlerType: (*OrchestratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSecrets",
			Handler:    _OrchestratorService_GetSecrets_Handler,
		},
		{
			MethodName: "ForceLogoutAll",
			Handler:    _OrchestratorService_ForceLogoutAll_Handler,
		},
		{
			MethodName: "ForceLogout",
			Handler:    _OrchestratorService_ForceLogout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orchestrator_service.proto",
}
