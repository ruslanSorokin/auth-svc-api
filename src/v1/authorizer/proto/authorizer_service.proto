syntax = "proto3";

package v1.authorizer.proto;

import "authorizer_transport.proto";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/ruslanSorokin/auth-svc-api/gen/v1/go/authorizer/proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info :{
		version: "1.0";
	}
	schemes: HTTPS;
};

service AuthorizerService{
  rpc SignUp(SignUpRequest) returns (SignUpResponse){
    option (google.api.http) = {
				post: "/api/auth/v1/accounts/sign-up"
				body: "*"
			};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
					summary: "Register a new account"
					description: "Register a new account via credentials and receive a new pair of refresh & access tokens"
					tags: "Accounts"
				};
  }
  rpc Login(LoginRequest) returns (LoginResponse){
    option (google.api.http) = {
				post: "/api/auth/v1/account/login"
				body: "*"
			};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
				summary: "Authenticate an account via its credentials"
				description: "Authenticate an account via its credentials and receive a new pair of refresh & access tokens"
				tags: "Accounts"
			};
  }
  rpc RefreshTokenPair(RefreshTokenPairRequest) returns (RefreshTokenPairResponse){
    option (google.api.http) = {
				post: "/api/auth/v1/account/refresh-token-pair"
				body: "*"
			};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
				summary: "Refresh an account's authentication via refresh token"
				description: "Refresh an account's authentication via refresh token and receive a new pair of refresh & access tokens"
				tags: "Accounts"
			};
  }
  rpc Logout(LogoutRequest) returns (LogoutResponse){
    option (google.api.http) = {
			post: "/api/auth/v1/account/logout"
			body: "*"
		};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			summary: "Logout current session"
			description: "Remove an account's active session"
			tags: "Accounts"
		};
  }
  rpc LogoutAll(LogoutAllRequest) returns (LogoutAllResponse){
    option (google.api.http) = {
			post: "/api/auth/v1/account/logout-all"
			body: "*"
		};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			summary: "Logout all sessions for the current account"
			description: "Logout all active session for the current account"
			tags: "Accounts"
		};
  }
}
