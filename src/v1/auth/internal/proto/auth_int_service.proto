syntax = "proto3";

package v1.authentication.internal.proto;

import "auth_int_transport.proto";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/ruslanSorokin/authentication-service-api/gen/v1/go/auth/internal/proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info :{
		version: "1.0";
	}
	schemes: HTTPS;
};

service AuthenticationInternalService{
  rpc GetSecrets(GetSecretsRequest) returns (GetSecretsResponse){
    option (google.api.http) = {
			get: "/api/auth/v1/secrets"
		};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			summary: "Get secret keys"
			description: "Get secret keys via password"
			tags: "Internal_API"
		};
  }
  rpc ForceLogoutAll(ForceLogoutAllRequest) returns (ForceLogoutAllResponse){
    option (google.api.http) = {
			post: "/api/auth/v1/all/force-logout"
			body: "*"
		};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			summary: "Force logout for all active"
			description: "Force logout specific user. It takes time equals to access token lifetime"
			tags: "Internal_API"
		};
  }
  rpc ForceLogout(ForceLogoutRequest) returns (ForceLogoutResponse){
    option (google.api.http) = {
			post: "/api/auth/v1/force-logout"
			body: "*"
		};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			summary: "Force logout for specific user"
			description: "Force logout specific user via one of the identities. It takes time equals to access token lifetime"
			tags: "Internal_API"
		};
  }
}
