// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: external_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthenticationExternalServiceClient is the client API for AuthenticationExternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationExternalServiceClient interface {
	AuthenticateUser(ctx context.Context, in *AuthenticateUserRequest, opts ...grpc.CallOption) (*AuthenticateUserResponse, error)
	RefreshUser(ctx context.Context, in *RefreshUserRequest, opts ...grpc.CallOption) (*RefreshUserResponse, error)
}

type authenticationExternalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationExternalServiceClient(cc grpc.ClientConnInterface) AuthenticationExternalServiceClient {
	return &authenticationExternalServiceClient{cc}
}

func (c *authenticationExternalServiceClient) AuthenticateUser(ctx context.Context, in *AuthenticateUserRequest, opts ...grpc.CallOption) (*AuthenticateUserResponse, error) {
	out := new(AuthenticateUserResponse)
	err := c.cc.Invoke(ctx, "/proto.v1.AuthenticationExternalService/AuthenticateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationExternalServiceClient) RefreshUser(ctx context.Context, in *RefreshUserRequest, opts ...grpc.CallOption) (*RefreshUserResponse, error) {
	out := new(RefreshUserResponse)
	err := c.cc.Invoke(ctx, "/proto.v1.AuthenticationExternalService/RefreshUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationExternalServiceServer is the server API for AuthenticationExternalService service.
// All implementations must embed UnimplementedAuthenticationExternalServiceServer
// for forward compatibility
type AuthenticationExternalServiceServer interface {
	AuthenticateUser(context.Context, *AuthenticateUserRequest) (*AuthenticateUserResponse, error)
	RefreshUser(context.Context, *RefreshUserRequest) (*RefreshUserResponse, error)
	mustEmbedUnimplementedAuthenticationExternalServiceServer()
}

// UnimplementedAuthenticationExternalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticationExternalServiceServer struct {
}

func (UnimplementedAuthenticationExternalServiceServer) AuthenticateUser(context.Context, *AuthenticateUserRequest) (*AuthenticateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateUser not implemented")
}
func (UnimplementedAuthenticationExternalServiceServer) RefreshUser(context.Context, *RefreshUserRequest) (*RefreshUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshUser not implemented")
}
func (UnimplementedAuthenticationExternalServiceServer) mustEmbedUnimplementedAuthenticationExternalServiceServer() {
}

// UnsafeAuthenticationExternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationExternalServiceServer will
// result in compilation errors.
type UnsafeAuthenticationExternalServiceServer interface {
	mustEmbedUnimplementedAuthenticationExternalServiceServer()
}

func RegisterAuthenticationExternalServiceServer(s grpc.ServiceRegistrar, srv AuthenticationExternalServiceServer) {
	s.RegisterService(&AuthenticationExternalService_ServiceDesc, srv)
}

func _AuthenticationExternalService_AuthenticateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationExternalServiceServer).AuthenticateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.v1.AuthenticationExternalService/AuthenticateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationExternalServiceServer).AuthenticateUser(ctx, req.(*AuthenticateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationExternalService_RefreshUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationExternalServiceServer).RefreshUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.v1.AuthenticationExternalService/RefreshUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationExternalServiceServer).RefreshUser(ctx, req.(*RefreshUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticationExternalService_ServiceDesc is the grpc.ServiceDesc for AuthenticationExternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticationExternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.AuthenticationExternalService",
	HandlerType: (*AuthenticationExternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticateUser",
			Handler:    _AuthenticationExternalService_AuthenticateUser_Handler,
		},
		{
			MethodName: "RefreshUser",
			Handler:    _AuthenticationExternalService_RefreshUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "external_service.proto",
}
