//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: external_service

package flat

import (
	context "context"
	flatbuffers "github.com/google/flatbuffers/go"
	grpc "google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// Client API for AuthenticationServiceExternal service
type AuthenticationServiceExternalClient interface {
	AuthenticateUser(ctx context.Context, in *flatbuffers.Builder,
		opts ...grpc.CallOption) (*AuthenticateUserResponse, error)
	RefreshUser(ctx context.Context, in *flatbuffers.Builder,
		opts ...grpc.CallOption) (*RefreshUserTokenResponse, error)
}

type authenticationServiceExternalClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationServiceExternalClient(cc grpc.ClientConnInterface) AuthenticationServiceExternalClient {
	return &authenticationServiceExternalClient{cc}
}

func (c *authenticationServiceExternalClient) AuthenticateUser(ctx context.Context, in *flatbuffers.Builder,
	opts ...grpc.CallOption) (*AuthenticateUserResponse, error) {
	out := new(AuthenticateUserResponse)
	err := c.cc.Invoke(ctx, "/flat.AuthenticationServiceExternal/AuthenticateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceExternalClient) RefreshUser(ctx context.Context, in *flatbuffers.Builder,
	opts ...grpc.CallOption) (*RefreshUserTokenResponse, error) {
	out := new(RefreshUserTokenResponse)
	err := c.cc.Invoke(ctx, "/flat.AuthenticationServiceExternal/RefreshUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthenticationServiceExternal service
type AuthenticationServiceExternalServer interface {
	AuthenticateUser(context.Context, *AuthenticateUserRequest) (*flatbuffers.Builder, error)
	RefreshUser(context.Context, *RefreshUserTokenRequest) (*flatbuffers.Builder, error)
	mustEmbedUnimplementedAuthenticationServiceExternalServer()
}

type UnimplementedAuthenticationServiceExternalServer struct {
}

func (UnimplementedAuthenticationServiceExternalServer) AuthenticateUser(context.Context, *AuthenticateUserRequest) (*flatbuffers.Builder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateUser not implemented")
}

func (UnimplementedAuthenticationServiceExternalServer) RefreshUser(context.Context, *RefreshUserTokenRequest) (*flatbuffers.Builder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshUser not implemented")
}

func (UnimplementedAuthenticationServiceExternalServer) mustEmbedUnimplementedAuthenticationServiceExternalServer() {}

type UnsafeAuthenticationServiceExternalServer interface {
	mustEmbedUnimplementedAuthenticationServiceExternalServer()
}

func RegisterAuthenticationServiceExternalServer(s grpc.ServiceRegistrar, srv AuthenticationServiceExternalServer) {
	s.RegisterService(&_AuthenticationServiceExternal_serviceDesc, srv)
}

func _AuthenticationServiceExternal_AuthenticateUser_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceExternalServer).AuthenticateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flat.AuthenticationServiceExternal/AuthenticateUser",
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceExternalServer).AuthenticateUser(ctx, req.(*AuthenticateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func _AuthenticationServiceExternal_RefreshUser_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshUserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceExternalServer).RefreshUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flat.AuthenticationServiceExternal/RefreshUser",
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceExternalServer).RefreshUser(ctx, req.(*RefreshUserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}
var _AuthenticationServiceExternal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flat.AuthenticationServiceExternal",
	HandlerType: (*AuthenticationServiceExternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticateUser",
			Handler:    _AuthenticationServiceExternal_AuthenticateUser_Handler,
		},
		{
			MethodName: "RefreshUser",
			Handler:    _AuthenticationServiceExternal_RefreshUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
	},
}
